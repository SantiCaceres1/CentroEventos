@page "/Admin/Gestionar/EventosDeportivos"
@rendermode InteractiveServer
@inject UsuarioSesion Sesion
@inject UsuarioEsAdminUseCase EsAdminUseCase
@inject NavigationManager Navigation
@inject ListarEventoDeportivoUseCase ListarEventoDeportivo
@inject ModificarEventoDeportivoUseCase ModificarEventoDeportivoUseCase
@inject EliminarEventoDeportivoUseCase EliminarEventoDeportivoUseCase
@inject ObtenerEventoUseCase ObtenerEventoUseCase

<h3>Panel de Administración de Eventos Deportivos</h3>
@if (esAdmin) {
    @if(visible){ 
        <AgregarActividad OnFormulario="Formulario" />
    }
    <button class="btn btn-success" @onclick="Formulario">Agregar Evento Deportivo por ID</button>
    <div>
        <input type="text" class="form-control" placeholder="Buscar Evento Deportivo" @bind="buscarEvento" />
        <button class="btn" @onclick="BuscarEventoDeportivo">Buscar</button>
    </div>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Evento</th>
                <th>Fecha</th>
                <th>Duración</th>
                <th>Cupo Máximo</th>
                <th>Resposable</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var evento in lista)
            {
                <tr>
                    <td>@evento.Nombre</td>
                    <td>@evento.FechaInicio.ToShortDateString()</td>
                    <td>@evento.DuracionHoras</td>
                    <td>@evento.CupoMaximo</td>
                    <td>@evento.Nombre</td>
                </tr>
                <h6>Descripcion: </h6>
                <p>@evento.Descripcion</p>
                <div>
                    <button class="btn btn-primary" @onclick="Modificar">Editar</button>
                    <button class="btn btn-danger" @onclick="() => Eliminar(evento)">Eliminar</button>
                </div>
            }
        </tbody>
    </table>
}
else {
    <p class="text-danger">Acceso no autorizado.</p>
}

@code {
    private bool esAdmin;
    private bool visible = false;
    private int buscarEvento; 
    List<EventoDeportivo> lista = new List<EventoDeportivo>();

    protected override async Task OnInitializedAsync()
    {
        esAdmin = Sesion.EstaLogueado() &&  await EsAdminUseCase.Ejecutar();
        var lista = await ListarEventoDeportivo.Ejecutar();
    }

    private void Formulario()
    {
        if(visible == false) visible = true;
        else visible = false;
    }

    private async void BuscarEventoDeportivo()
    {
        var evento = await ObtenerEventoUseCase.Ejecutar(buscarEvento);
        if (evento != null)
        {   
            lista.Clear();
            lista.Add(evento);
        }
    }

    private async Task Modificar()
    {
        @* await ModificarEventoDeportivoUseCase.Ejecutar(evento,); *@
    }

    private async Task Eliminar(EventoDeportivo evento)
    {
        try {
            var id = Sesion.Id ?? 0;
            await EliminarEventoDeportivoUseCase.Ejecutar(evento.Id, id);
        } catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar evento: {ex.Message}");
        }
        
    }
}